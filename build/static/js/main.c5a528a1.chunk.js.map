{"version":3,"sources":["app/redux/User/User.types.ts","app/redux/User/User.reducers.ts","domain/usecases/TodosService.ts","domain/entities/Todos.ts","data/repositories/TodoRepositoryImpl.ts","app/redux/Todo/Todo.actions.ts","app/redux/Todo/Todo.types.ts","app/pages/todo/TodoList.tsx","app/TodoRouteManager.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LIST_LOAD_REQUEST","LIST_LOAD_SUCCESS","LIST_LOAD_FAILURE","initialState","loading","users","state","action","type","console","log","payload","TodoServiceImpl","ir","todoRepo","this","GetTodos","Todo","todoUID","todo","jsontodoList","TodoRepositoryImpl","splice","jsonString","JSON","stringify","res","parse","map","refreshList","dispatch","a","todoService","todos","error","connect","useDispatch","className","onClick","TodoRouteManager","exact","path","component","TodoList","from","to","reducers","combineReducers","store","createStore","applyMiddleware","thunk","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4QAAaA,EAAoB,oBACpBC,EAAoB,oBACpBC,EAAoB,oBCC3BC,EAAe,CACjBC,SAAS,EACTC,MAAO,IA6BIA,MA1Bf,WAAiG,IAAlFC,EAAiF,uDAAzEH,EAAcI,EAA2D,uCAC5F,OAAQA,EAAOC,MACX,KAAKR,EACD,OAAO,2BACAM,GADP,IAEIF,SAAS,IAGjB,KAAKF,EACD,OAAO,2BACAI,GADP,IAEIF,SAAS,IAGjB,KAAKH,EAED,OADAQ,QAAQC,WAAWH,EAAOI,SACnB,2BACAL,GADP,IAEID,MAAOE,EAAOI,QACdP,SAAS,IAGjB,QACI,OAAOE,I,qDCxBNM,EAAb,WAGI,WAAYC,GAAqB,yBAFjCC,cAEgC,EAC5BC,KAAKD,SAAWD,EAJxB,0LAQeE,KAAKD,SAASE,YAR7B,6GCPaC,EAIT,WAAYC,EAAiBC,GAAe,yBAH5CD,aAG2C,OAF3CC,UAE2C,EACvCJ,KAAKG,QAAUA,EACfH,KAAKI,KAAOA,GCEPC,EAAe,CAAC,CAAEF,QAAS,EAAGC,KAAM,KAEpCE,EAAb,4NAEQD,EAAaE,OAAO,GACdC,EAAaC,KAAKC,UAAUL,GAC5BM,EAAMF,KAAKG,MAAMJ,GAJ/B,kBAKeG,EAAIE,KAAI,SAACT,GAAD,OAAmB,IAAIF,EAAKE,EAAKD,QAASC,EAAKA,UALtE,wGCNaU,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACvBD,EAAS,CAAEtB,KCLkB,sBDIN,SAIbM,EAAW,IAAIO,EACfW,EAAc,IAAIpB,EAAgBE,GALrB,SAMCkB,EAAYhB,WANb,OAMbiB,EANa,OAOnBH,EAAS,CAAEtB,KCVc,oBDUWG,QAASsB,IAP1B,kDASnBH,EAAS,CAAEtB,KCXc,oBDWW0B,MAAK,OATtB,0DAAH,sDE6BTC,G,MAAAA,aAPS,SAAC7B,GAErB,OADAG,QAAQC,IAAIJ,EAAM2B,OACX,CACHA,MAAO3B,EAAM2B,MAAMA,SAIZE,EAxBE,SAAC,GAA0B,IAAxBF,EAAuB,EAAvBA,MACVH,EAAWM,cAIjB,OACI,sBAAKC,UAAU,kBAAf,UACI,wBAAQC,QALI,WAChBR,EAASD,IAIL,qBACA,qBAAKQ,UAAU,mBAAf,SACKJ,EAAML,KAAI,SAACT,GAAD,OACP,8BAAyBA,EAAKA,MAApBA,EAAKD,qBCJpBqB,EAXU,WACrB,OACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,cAAC,IAAD,CAAUC,KAAK,IAAIC,GAAG,YCDhCC,EAAWC,YAAgB,CAAE1C,UAC7B2C,EAAQC,YAAYH,EAAUI,YAAgBC,MAWrCC,EATH,WACR,OACI,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SAEI,cAAC,EAAD,OCuEQK,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCrFvCC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDyEzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAChCA,EAAaC,kB","file":"static/js/main.c5a528a1.chunk.js","sourcesContent":["export const LIST_LOAD_REQUEST = \"LIST_LOAD_REQUEST\"\nexport const LIST_LOAD_SUCCESS = \"LIST_LOAD_SUCCESS\"\nexport const LIST_LOAD_FAILURE = \"LIST_LOAD_FAILURE\"\n\nexport type UserProps = {\n    users: User[]\n    refreshList: () => User[]\n}\n\nexport type UserActionType = RefreshUserListSuccess\n\nexport interface RefreshUserListSuccess {\n    type: typeof LIST_LOAD_SUCCESS\n    payload: User[]\n}\n\nexport interface User {\n    id: number\n    first_name: string\n    last_name: string\n    email: string\n    avatar: string\n}\n","// import { Item } from \"../../../domain/entities/Item\"\nimport { LIST_LOAD_REQUEST, LIST_LOAD_SUCCESS, LIST_LOAD_FAILURE, RefreshUserListSuccess } from \"./User.types\"\n\nconst initialState = {\n    loading: false,\n    users: [],\n}\n\nfunction users(state = initialState, action: { type: string; payload: RefreshUserListSuccess }) {\n    switch (action.type) {\n        case LIST_LOAD_REQUEST:\n            return {\n                ...state,\n                loading: true,\n            }\n\n        case LIST_LOAD_FAILURE:\n            return {\n                ...state,\n                loading: false,\n            }\n\n        case LIST_LOAD_SUCCESS:\n            console.log(typeof action.payload)\n            return {\n                ...state,\n                users: action.payload,\n                loading: false,\n            }\n\n        default:\n            return state\n    }\n}\nexport default users\n","import { Todo } from \"../entities/Todos\"\nimport { TodoRepository } from \"../repositories/TodoRepository\"\n\nexport interface TodoService {\n    GetTodos(): Promise<Todo[]>\n}\n\nexport class TodoServiceImpl implements TodoService {\n    todoRepo: TodoRepository\n\n    constructor(ir: TodoRepository) {\n        this.todoRepo = ir\n    }\n\n    async GetTodos(): Promise<Todo[]> {\n        return this.todoRepo.GetTodos()\n    }\n}\n","export class Todo {\n    todoUID: number\n    todo: string\n\n    constructor(todoUID: number, todo: string) {\n        this.todoUID = todoUID\n        this.todo = todo\n    }\n}\n","import { Todo } from \"../../domain/entities/Todos\"\nimport { TodoRepository } from \"../../domain/repositories/TodoRepository\"\n\nclass TodoDTO {\n    todoUID = 0\n    todo = \"\"\n}\n\nexport const jsontodoList = [{ todoUID: 0, todo: \"\" }]\n\nexport class TodoRepositoryImpl implements TodoRepository {\n    async GetTodos(): Promise<Todo[]> {\n        jsontodoList.splice(0)\n        const jsonString = JSON.stringify(jsontodoList)\n        const res = JSON.parse(jsonString)\n        return res.map((todo: TodoDTO) => new Todo(todo.todoUID, todo.todo))\n    }\n}\n","import { LIST_LOAD_REQUEST, LIST_LOAD_SUCCESS, LIST_LOAD_FAILURE } from \"./Todo.types\"\nimport { TodoServiceImpl } from \"../../../domain/usecases/TodosService\"\nimport { TodoRepositoryImpl } from \"../../../data/repositories/TodoRepositoryImpl\"\n\nexport const refreshList = async (dispatch: any) => {\n    dispatch({ type: LIST_LOAD_REQUEST })\n\n    try {\n        const todoRepo = new TodoRepositoryImpl()\n        const todoService = new TodoServiceImpl(todoRepo)\n        const todos = await todoService.GetTodos()\n        dispatch({ type: LIST_LOAD_SUCCESS, payload: todos })\n    } catch (error) {\n        dispatch({ type: LIST_LOAD_FAILURE, error })\n    }\n}\n","export const LIST_LOAD_REQUEST = \"LIST_LOAD_REQUEST\"\nexport const LIST_LOAD_SUCCESS = \"LIST_LOAD_SUCCESS\"\nexport const LIST_LOAD_FAILURE = \"LIST_LOAD_FAILURE\"\n\nexport type TodoProps = {\n    todos: Todo[]\n    refreshList: () => Todo[]\n}\n\nexport type TodoActionType = RefreshTodoListSuccess\n\nexport interface RefreshTodoListSuccess {\n    type: typeof LIST_LOAD_SUCCESS\n    payload: Todo[]\n}\n\nexport interface Todo {\n    todoUID: number\n    todo: string\n}\n","import React from \"react\"\nimport { connect, useDispatch } from \"react-redux\"\nimport { refreshList } from \"../../redux/Todo/Todo.actions\"\nimport { TodoProps, Todo } from \"../../redux/Todo/Todo.types\"\nimport \"./TodoList.css\"\n\ninterface RootState {\n    todos: any\n}\nconst TodoList = ({ todos }: TodoProps) => {\n    const dispatch = useDispatch()\n    const handleClick = () => {\n        dispatch(refreshList)\n    }\n    return (\n        <div className=\"userMainWrapper\">\n            <button onClick={handleClick}>Refresh</button>\n            <div className=\"cardUsersWrapper\">\n                {todos.map((todo: Todo) => (\n                    <div key={todo.todoUID}>{todo.todo}</div>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => {\n    console.log(state.todos)\n    return {\n        todos: state.todos.todos,\n    }\n}\n\nexport default connect(mapStateToProps)(TodoList)\n","import React from \"react\"\nimport { Redirect, BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nimport TodoList from \"./pages/todo/TodoList\"\n\nconst TodoRouteManager = () => {\n    return (\n        <Router>\n            <Switch>\n                <Route exact path=\"/\" component={TodoList} />\n                <Redirect from=\"*\" to=\"/\" />\n            </Switch>\n        </Router>\n    )\n}\n\nexport default TodoRouteManager\n","import React from \"react\"\nimport { Provider } from \"react-redux\"\nimport { createStore, combineReducers, applyMiddleware } from \"redux\"\nimport thunk from \"redux-thunk\"\nimport users from \"./app/redux/User/User.reducers\"\nimport TodoRouteManager from \"./app/TodoRouteManager\"\n//import UserRouteManager from \"./app/UserRouteManager\"\n\nconst reducers = combineReducers({ users })\nconst store = createStore(reducers, applyMiddleware(thunk))\n\nconst App = () => {\n    return (\n        <Provider store={store}>\n            {/* <UserRouteManager/> */}\n            <TodoRouteManager />\n        </Provider>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nfunction registerValidSW(swUrl: any, config: any) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\")\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: any, config: any) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\")\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\")\n        })\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister()\n        })\n    }\n}\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\nexport function register(config: any) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}